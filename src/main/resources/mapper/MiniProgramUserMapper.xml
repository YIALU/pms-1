<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

    <mapper namespace="com.mioto.pms.module.weixin.dao.MiniProgramUserDao">

    <resultMap id="miniProgramUserResultMap" type="com.mioto.pms.module.weixin.model.MiniProgramUser">
        <id property="id" column="t_id" jdbcType="INTEGER"/>
        <result property="wxNickname" column="t_wx_nickname"/>
        <result property="openId" column="t_open_id"/>
        <result property="unionId" column="t_union_id"/>
        <result property="userId" column="t_user_id"/>
        <result property="userType" column="t_user_type"/>
    </resultMap>

    <resultMap id="tenantHomeVOMap" type="com.mioto.pms.module.weixin.model.TenantHomeVO">
        <result property="rentalId" column="rentalId"/>
        <collection property="unpaidFeesVOList" column="rentalId" select="findUnpaidFeesVOList"/>
    </resultMap>

    <resultMap id="contractInfoVOMap" type="com.mioto.pms.module.weixin.model.ContractInfoVO">
        <collection property="contractPriceVOList" column="roomId" select="com.mioto.pms.module.room.dao.RoomDao.findContractPrices"/>
    </resultMap>

    <resultMap id="personalCenterVOMap" type="com.mioto.pms.module.weixin.model.PersonalCenterVO">
        <collection property="unpaidFeeBillsVOList" column="{date=selectDate,logonUserId=logonUserId}" select="findUnpaidFeeBillsVO"/>
    </resultMap>


    <sql id="miniProgramUserAliasColumns">
        t.`id` as t_id,
        t.`wx_nickname` as t_wx_nickname,
        t.`open_id` as t_open_id,
        t.`union_id` as t_union_id,
        t.`user_id` as t_user_id,
        t.`user_type` as t_user_type
    </sql>

    <insert id="insert">
        insert into mini_program_user
        (`id`,`wx_nickname`,`open_id`,`union_id`,`user_id`,`user_type`)
        values
        (#{id},#{wxNickname},#{openId},#{unionId},#{userId},#{userType})
    </insert>

    <insert id="insertIgnoreNull" useGeneratedKeys="true" keyProperty="id" parameterType="com.mioto.pms.module.weixin.model.MiniProgramUser">
        insert into mini_program_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                `id`,
            </if>
            <if test="wxNickname != null">
                `wx_nickname`,
            </if>
            <if test="openId != null">
                `open_id`,
            </if>
            <if test="unionId != null">
                `union_id`,
            </if>
            <if test="userId != null">
                `user_id`,
            </if>
            <if test="userType != null">
                `user_type`,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id},
            </if>
            <if test="wxNickname != null">
                #{wxNickname},
            </if>
            <if test="openId != null">
                #{openId},
            </if>
            <if test="unionId != null">
                #{unionId},
            </if>
            <if test="userId != null">
                #{userId},
            </if>
            <if test="userType != null">
                #{userType},
            </if>
        </trim>
    </insert>

    <update id="update">
        update mini_program_user
        set `wx_nickname` = #{wxNickname},`open_id` = #{openId},`union_id` = #{unionId},`user_id` = #{userId},`user_type` = #{userType}
        where id = #{id}
    </update>

    <update id="updateIgnoreNull">
        update mini_program_user
        <trim prefix="SET" suffixOverrides=",">
            <if test="wxNickname != null">
                `wx_nickname` = #{wxNickname},
            </if>
            <if test="openId != null">
                `open_id` = #{openId},
            </if>
            <if test="unionId != null">
                `union_id` = #{unionId},
            </if>
            <if test="userId != null">
                `user_id` = #{userId},
            </if>
            <if test="userType != null">
                `user_type` = #{userType},
            </if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteByColumn">
        delete from mini_program_user where ${column} = #{value}
    </delete>

    <delete id="batchDelete">
        delete from mini_program_user where id in
        <foreach collection="array" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </delete>

    <select id="findByColumn" resultMap="miniProgramUserResultMap">
        SELECT <include refid="miniProgramUserAliasColumns"/> FROM mini_program_user t where t.${column} = #{value}
    </select>

    <select id="findList" resultMap="miniProgramUserResultMap">
        SELECT <include refid="miniProgramUserAliasColumns"/> FROM mini_program_user t
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="id != null and id != ''">
                AND t.id = #{id}
            </if>
            <if test="wxNickname != null and wxNickname != ''">
                AND t.wx_nickname = #{wxNickname}
            </if>
            <if test="openId != null and openId != ''">
                AND t.open_id = #{openId}
            </if>
            <if test="unionId != null and unionId != ''">
                AND t.union_id = #{unionId}
            </if>
            <if test="userId != null and userId != ''">
                AND t.user_id = #{userId}
            </if>
            <if test="userType != null and userType != ''">
                AND t.user_type = #{userType}
            </if>
        </trim>
    </select>

    <select id="findHomeData" resultMap="tenantHomeVOMap">
        select d.id roomId,d.room_name roomName,e.address,c.id rentalId,a.name tenantName,a.phone,a.id_card idCard,f.open_id landlordOpenId
        from tenant_info a
        left join rental_tenant b on a.id = b.tenant_id
        LEFT JOIN rental_info c on b.rental_id = c.id
        LEFT JOIN room d on c.room_id = d.id
        LEFT JOIN site e on d.site_id = e.id
        LEFT JOIN mini_program_user f on d.user_id = f.user_id
        where a.id = #{logonUserId}
    </select>
    <select id="findUnpaidFeesVOList" resultType="com.mioto.pms.module.weixin.model.TenantBillVO">
        select b.create_time createTime,b.id costInfoId,sum(c.amount) amount
        from rental_info a
        LEFT JOIN cost_info b on a.id = b.rental_id
        left join cost_detail c on b.id = c.cost_info_id and c.pay_status = 0
        where a.id = #{rentalId} and b.is_send = 1 and b.pay_status = 0
        group by b.id
    </select>
    <select id="findUnpaidFees" resultType="com.mioto.pms.module.weixin.model.UnpaidFeesVO">
        select c.amount,c.cost_start_time startTime,c.cost_end_time endTime,c.cost_start_data startData,c.cost_type costTypeId,
               c.cost_end_data endData,b.create_time createTime,c.bill_child_number billChildNumber,
               case when c.type = 1 then d.`name` else e.`name` end costName
        from rental_info a
        LEFT JOIN cost_info b on a.id = b.rental_id
        left join cost_detail c on b.id = c.cost_info_id
        left join dictionary d on c.cost_type = d.id and c.type = 1
        left join cost_type e on c.cost_type = e.id and c.type = 2
        where a.id = #{rentalId} and c.pay_status = 0
        order by b.create_time desc, bill_child_number asc
    </select>
    <select id="findContractInfo" resultMap="contractInfoVOMap">
        select a.start_time startTime,a.end_time endTime,a.deposit,a.room_id roomId
        from rental_info a
        where a.id = #{rentalId}
        group by a.id
    </select>
    <select id="findHistoryBills" resultType="com.mioto.pms.module.weixin.model.TenantBillVO">
        select a.id costInfoId,a.create_time createTime,a.total_amount amount from cost_info a
        where a.rental_id = #{rentalId} and a.pay_status = 1
        order by a.create_time desc
    </select>
    <select id="findTenantList" resultType="com.mioto.pms.module.weixin.model.TenantListVO">
        select d.`name`,d.phone,concat(e.address,b.room_name) address
        from rental_info a
        left join room b on a.room_id = b.id
        left join rental_tenant c on a.id = c.rental_id
        left join tenant_info d on c.tenant_id = d.id
        left join site e on b.site_id = e.id
        where a.`status` = 1
        <if test="logonUserId != null">
            and b.user_id = #{logonUserId}
        </if>
    </select>
    <select id="findLastData" resultType="com.mioto.pms.module.weixin.model.LastMeterReadVO">
        select b.*,c.`name` from (
            select max(a.cost_end_data) lastData,max(a.cost_end_time) lastTime,a.cost_type costType from cost_detail a
            where a.cost_info_id = (select id from cost_info where rental_id = #{rentalId} order by create_time desc limit 1)
            and a.cost_end_data is not null GROUP BY a.cost_type
        ) b left join dictionary c on b.costType = c.id
    </select>

    <select id="findPersonalCenterData" resultMap="personalCenterVOMap">
        select sum(e.pay_amount) amount,#{date} selectDate,#{logonUserId} logonUserId from room a
        left join rental_info b on a.id = b.room_id
        left join cost_info c on b.id = c.rental_id
        left join cost_detail d on c.id = d.cost_info_id
        left join pay_info e on d.bill_child_number = e.bill_number
        where DATE_FORMAT(e.pay_time,"%Y-%m") = #{date} and a.user_id = #{logonUserId}
    </select>

    <select id="findUnpaidFeeBillsVO" resultType="com.mioto.pms.module.weixin.model.UnpaidFeeBillsVO">
        select a.id rentalId,concat(e.address,b.room_name) address,c.id costInfoId,sum(d.amount) amount,c.create_time createTime
        from rental_info a
        left join room b on a.room_id = b.id
        left join cost_info c on a.id = c.rental_id
        left join cost_detail d on c.id = d.cost_info_id
        left join site e on b.site_id = e.id
        where b.user_id = #{logonUserId} and a.`status` = 1 and d.pay_status = 0 and DATE_FORMAT(c.create_time,"%Y-%m") = #{date}
        group by a.id
        order by c.create_time desc
    </select>

</mapper>